# https://github.com/qifanyyy/JupyterNotebook/blob/20d8df6172906337f81583dabb841d66b8f31857/new_algs/Number%2Btheoretic%2Balgorithms/Shor's%2Balgorithm/testQFT2.py
from qiskit.circuit.library import QFT
from qiskit import QuantumRegister,QuantumCircuit
from qiskit.visualization import plot_histogram
import simulation as sim
import argparse
from gateSet import myR

args = sim.process_command()
qc = QFT(3)
qr=QuantumRegister(3)
qc = QuantumCircuit(qr)
qc.x(qr[0])
qc.x(qr[2])
gate = QFT(3,approximation_degree=0)
inv = QFT(3,inverse=True,approximation_degree=0)
qc.append(gate,qargs=qr[:])
qc.append(inv,qargs=qr[:])
print(qc)
qc.measure_all()
res=sim.mySim(qc,args)
plot_histogram(res).savefig(f'testQFT_{0}.png')
qr=QuantumRegister(3)
qc = QuantumCircuit(qr)
qc.x(qr[0])
qc.x(qr[2])
gate = QFT(3,approximation_degree=1)
inv = QFT(3,inverse=True,approximation_degree=1)
qc.append(gate,qargs=qr[:])
qc.append(inv,qargs=qr[:])
print(qc)
qc.measure_all()
res=sim.mySim(qc,args)
plot_histogram(res).savefig(f'testQFT_{1}.png')
qr=QuantumRegister(3)
qc = QuantumCircuit(qr)
qc.x(qr[0])
qc.x(qr[2])
gate = QFT(3,approximation_degree=2)
inv = QFT(3,inverse=True,approximation_degree=2)
qc.append(gate,qargs=qr[:])
qc.append(inv,qargs=qr[:])
print(qc)
qc.measure_all()
res=sim.mySim(qc,args)
plot_histogram(res).savefig(f'testQFT_{2}.png')